#!/usr/bin/env node
import{defineCommand as mt,runMain as ut}from"citty";import{defineCommand as He}from"citty";import q from"consola";import A from"node:fs/promises";import Ae from"node:os";import z from"node:path";var K=z.join(Ae.homedir(),".local","share","copilot-api"),xe=z.join(K,"github_token"),h={APP_DIR:K,GITHUB_TOKEN_PATH:xe};async function C(){await A.mkdir(h.APP_DIR,{recursive:!0}),await Ce(h.GITHUB_TOKEN_PATH)}async function Ce(e){try{await A.access(e,A.constants.W_OK)}catch{await A.writeFile(e,""),await A.chmod(e,384)}}var r={accountType:"individual",manualApprove:!1,rateLimitWait:!1,showToken:!1};import l from"consola";import pe from"node:fs/promises";import{randomUUID as Se}from"node:crypto";var d=()=>({"content-type":"application/json",accept:"application/json"}),Q="0.26.7",X=`copilot-chat/${Q}`,Y=`GitHubCopilotChat/${Q}`,Z="2025-04-01",b=e=>e.accountType==="individual"?"https://api.githubcopilot.com":`https://api.${e.accountType}.githubcopilot.com`,_=(e,t=!1)=>{let o={Authorization:`Bearer ${e.copilotToken}`,"content-type":d()["content-type"],"copilot-integration-id":"vscode-chat","editor-version":`vscode/${e.vsCodeVersion}`,"editor-plugin-version":X,"user-agent":Y,"openai-intent":"conversation-panel","x-github-api-version":Z,"x-request-id":Se(),"x-vscode-user-agent-library-version":"electron-fetch"};return t&&(o["copilot-vision-request"]="true"),o},k="https://api.github.com",S=e=>({...d(),authorization:`token ${e.githubToken}`,"editor-version":`vscode/${e.vsCodeVersion}`,"editor-plugin-version":X,"user-agent":Y,"x-github-api-version":Z,"x-vscode-user-agent-library-version":"electron-fetch"}),v="https://github.com",R="Iv1.b507a08c87ecfe98",ee=["read:user"].join(" ");import N from"consola";var a=class extends Error{response;constructor(t,o){super(t),this.response=o}};async function f(e,t){if(N.error("Error occurred:",t),t instanceof a){let o=await t.response.text();try{N.error("HTTP error:",JSON.parse(o))}catch{N.error("HTTP error text:",o)}return e.json({error:{message:o,type:"error"}},t.response.status)}return e.json({error:{message:t.message,type:"error"}},500)}var G=async()=>{let e=await fetch(`${k}/copilot_internal/v2/token`,{headers:S(r)});if(!e.ok)throw new a("Failed to get Copilot token",e);return await e.json()};async function te(){let e=await fetch(`${v}/login/device/code`,{method:"POST",headers:d(),body:JSON.stringify({client_id:R,scope:ee})});if(!e.ok)throw new a("Failed to get device code",e);return await e.json()}async function oe(){let e=await fetch(`${k}/user`,{headers:{authorization:`token ${r.githubToken}`,...d()}});if(!e.ok)throw new a("Failed to get GitHub user",e);return await e.json()}import $ from"consola";import ve from"consola";var ne=async()=>{let e=await fetch(`${b(r)}/models`,{headers:_(r)});if(!e.ok)throw new a("Failed to get models",e);return await e.json()};var re="1.98.1";async function L(){let e=new AbortController,t=setTimeout(()=>{e.abort()},5e3);try{let n=await(await fetch("https://aur.archlinux.org/cgit/aur.git/plain/PKGBUILD?h=visual-studio-code-bin",{signal:e.signal})).text(),s=/pkgver=([0-9.]+)/,i=n.match(s);return i?i[1]:re}catch{return re}finally{clearTimeout(t)}}await L();var x=e=>new Promise(t=>{setTimeout(t,e)}),se=e=>e==null;async function P(){let e=await ne();r.models=e}var ie=async()=>{let e=await L();r.vsCodeVersion=e,ve.info(`Using VSCode version: ${e}`)};async function ae(e){let t=(e.interval+1)*1e3;for($.debug(`Polling access token with interval of ${t}ms`);;){let o=await fetch(`${v}/login/oauth/access_token`,{method:"POST",headers:d(),body:JSON.stringify({client_id:R,device_code:e.device_code,grant_type:"urn:ietf:params:oauth:grant-type:device_code"})});if(!o.ok){await x(t),$.error("Failed to poll access token:",await o.text());continue}let n=await o.json();$.debug("Polling access token response:",n);let{access_token:s}=n;if(s)return s;await x(t)}}var Re=()=>pe.readFile(h.GITHUB_TOKEN_PATH,"utf8"),Pe=e=>pe.writeFile(h.GITHUB_TOKEN_PATH,e),le=async()=>{let{token:e,refresh_in:t}=await G();r.copilotToken=e,l.debug("GitHub Copilot Token fetched successfully!"),r.showToken&&l.info("Copilot token:",e);let o=(t-60)*1e3;setInterval(async()=>{l.debug("Refreshing Copilot token");try{let{token:n}=await G();r.copilotToken=n,l.debug("Copilot token refreshed"),r.showToken&&l.info("Refreshed Copilot token:",n)}catch(n){throw l.error("Failed to refresh Copilot token:",n),n}},o)};async function H(e){try{let t=await Re();if(t&&!e?.force){r.githubToken=t,r.showToken&&l.info("GitHub token:",t),await ce();return}l.info("Not logged in, getting new access token");let o=await te();l.debug("Device code response:",o),l.info(`Please enter the code "${o.user_code}" in ${o.verification_uri}`);let n=await ae(o);await Pe(n),r.githubToken=n,r.showToken&&l.info("GitHub token:",n),await ce()}catch(t){throw t instanceof a?(l.error("Failed to get GitHub token:",await t.response.json()),t):(l.error("Failed to get GitHub token:",t),t)}}async function ce(){let e=await oe();l.info(`Logged in as ${e.login}`)}async function Ee(e){e.verbose&&(q.level=5,q.info("Verbose logging enabled")),r.showToken=e.showToken,await C(),await H({force:!0}),q.success("GitHub token written to",h.GITHUB_TOKEN_PATH)}var me=He({meta:{name:"auth",description:"Run GitHub auth flow without running the server"},args:{verbose:{alias:"v",type:"boolean",default:!1,description:"Enable verbose logging"},"show-token":{type:"boolean",default:!1,description:"Show GitHub token on auth"}},run({args:e}){return Ee({verbose:e.verbose,showToken:e["show-token"]})}});import{defineCommand as it}from"citty";import at from"clipboardy";import u from"consola";import{serve as ct}from"srvx";import pt from"tiny-invariant";import{execSync as Be}from"node:child_process";import Oe from"node:process";function Ie(){let{platform:e,ppid:t,env:o}=Oe;if(e==="win32"){try{let n=`wmic process get ParentProcessId,Name | findstr "${t}"`;if(Be(n,{stdio:"pipe"}).toString().toLowerCase().includes("powershell.exe"))return"powershell"}catch{return"cmd"}return"cmd"}else{let n=o.SHELL;if(n){if(n.endsWith("zsh"))return"zsh";if(n.endsWith("fish"))return"fish";if(n.endsWith("bash"))return"bash"}return"sh"}}function ue(e,t=""){let o=Ie(),n=Object.entries(e).filter(([,i])=>i!==void 0),s;switch(o){case"powershell":{s=n.map(([i,c])=>`$env:${i} = ${c}`).join("; ");break}case"cmd":{s=n.map(([i,c])=>`set ${i}=${c}`).join(" & ");break}case"fish":{s=n.map(([i,c])=>`set -gx ${i} ${c}`).join("; ");break}default:{let i=n.map(([c,m])=>`${c}=${m}`).join(" ");s=n.length>0?`export ${i}`:"";break}}return s&&t?`${s}${o==="cmd"?" & ":" && "}${t}`:s||t}import{Hono as nt}from"hono";import{cors as rt}from"hono/cors";import{logger as st}from"hono/logger";import{Hono as Le}from"hono";import w from"consola";import{streamSSE as Ne}from"hono/streaming";import Me from"consola";var E=async()=>{if(!await Me.prompt("Accept incoming request?",{type:"confirm"}))throw new a("Request rejected",Response.json({message:"Request rejected"},{status:403}))};import D from"consola";async function B(e){if(e.rateLimitSeconds===void 0)return;let t=Date.now();if(!e.lastRequestTimestamp){e.lastRequestTimestamp=t;return}let o=(t-e.lastRequestTimestamp)/1e3;if(o>e.rateLimitSeconds){e.lastRequestTimestamp=t;return}let n=Math.ceil(e.rateLimitSeconds-o);if(!e.rateLimitWait)throw D.warn(`Rate limit exceeded. Need to wait ${n} more seconds.`),new a("Rate limit exceeded",Response.json({message:"Rate limit exceeded"},{status:429}));let s=n*1e3;D.warn(`Rate limit reached. Waiting ${n} seconds before proceeding...`),await x(s),e.lastRequestTimestamp=t,D.info("Rate limit wait completed, proceeding with request")}import{countTokens as de}from"gpt-tokenizer/model/gpt-4o";var fe=e=>{let t=e.map(m=>{let T="";return typeof m.content=="string"?T=m.content:Array.isArray(m.content)&&(T=m.content.filter(g=>g.type==="text").map(g=>g.text).join("")),{...m,content:T}}),o=t.filter(m=>m.role!=="tool"),n=[],s=t.at(-1);s?.role==="assistant"&&(o=t.slice(0,-1),n=[s]);let i=de(o),c=de(n);return{input:i,output:c}};import je from"consola";import{events as Ue}from"fetch-event-stream";var O=async e=>{if(!r.copilotToken)throw new Error("Copilot token not found");let t=e.messages.some(n=>typeof n.content!="string"&&n.content?.some(s=>s.type==="image_url")),o=await fetch(`${b(r)}/chat/completions`,{method:"POST",headers:_(r,t),body:JSON.stringify(e)});if(!o.ok)throw je.error("Failed to create chat completions",o),new a("Failed to create chat completions",o);return e.stream?Ue(o):await o.json()};async function ge(e){await B(r);let t=await e.req.json();if(w.debug("Request payload:",JSON.stringify(t).slice(-400)),w.info("Current token count:",fe(t.messages)),r.manualApprove&&await E(),se(t.max_tokens)){let n=r.models?.data.find(s=>s.id===t.model);t={...t,max_tokens:n?.capabilities.limits.max_output_tokens},w.debug("Set max_tokens to:",JSON.stringify(t.max_tokens))}let o=await O(t);return Ge(o)?(w.debug("Non-streaming response:",JSON.stringify(o)),e.json(o)):(w.debug("Streaming response"),Ne(e,async n=>{for await(let s of o)w.debug("Streaming chunk:",JSON.stringify(s)),await n.writeSSE(s)}))}var Ge=e=>Object.hasOwn(e,"choices");var I=new Le;I.post("/",async e=>{try{return await ge(e)}catch(t){return await f(e,t)}});import{Hono as $e}from"hono";var he=async e=>{if(!r.copilotToken)throw new Error("Copilot token not found");let t=await fetch(`${b(r)}/embeddings`,{method:"POST",headers:_(r),body:JSON.stringify(e)});if(!t.ok)throw new a("Failed to create embeddings",t);return await t.json()};var M=new $e;M.post("/",async e=>{try{let t=await e.req.json(),o=await he(t);return e.json(o)}catch(t){return await f(e,t)}});import{Hono as Ze}from"hono";import y from"consola";import{streamSSE as Xe}from"hono/streaming";function j(e){return e===null?null:{stop:"end_turn",length:"max_tokens",tool_calls:"tool_use",content_filter:"end_turn"}[e]}function ye(e){return{model:e.model,messages:qe(e.messages,e.system),max_tokens:e.max_tokens,stop:e.stop_sequences,stream:e.stream,temperature:e.temperature,top_p:e.top_p,user:e.metadata?.user_id,tools:Je(e.tools),tool_choice:We(e.tool_choice)}}function qe(e,t){let o=De(t),n=e.flatMap(s=>s.role==="user"?Ve(s):Fe(s));return[...o,...n]}function De(e){return e?typeof e=="string"?[{role:"system",content:e}]:[{role:"system",content:e.map(o=>o.text).join(`

`)}]:[]}function Ve(e){let t=[];if(Array.isArray(e.content)){let o=e.content.filter(s=>s.type==="tool_result"),n=e.content.filter(s=>s.type!=="tool_result");for(let s of o)t.push({role:"tool",tool_call_id:s.tool_use_id,content:typeof s.content=="string"?s.content:JSON.stringify(s.content)});if(n.length>0){let s=n.map(i=>i.type==="image"?{type:"image_url",image_url:{url:`data:${i.source.media_type};base64,${i.source.data}`}}:{type:"text",text:i.text});t.push({role:"user",content:s})}}else t.push({role:"user",content:V(e.content)});return t}function Fe(e){if(!Array.isArray(e.content))return[{role:"assistant",content:V(e.content)}];let t=e.content.filter(n=>n.type==="tool_use"),o=e.content.filter(n=>n.type==="text");return t.length>0?[{role:"assistant",content:o.map(n=>n.text).join(`

`)||null,tool_calls:t.map(n=>({id:n.id,type:"function",function:{name:n.name,arguments:JSON.stringify(n.input)}}))}]:[{role:"assistant",content:V(e.content)}]}function V(e){return typeof e=="string"?e:Array.isArray(e)?e.filter(t=>t.type==="text").map(t=>t.text).join(`

`):null}function Je(e){if(e)return e.map(t=>({type:"function",function:{name:t.name,description:t.description,parameters:t.input_schema}}))}function We(e){if(e)switch(e.type){case"auto":return"auto";case"any":return"required";case"tool":return e.name?{type:"function",function:{name:e.name}}:void 0;case"none":return"none";default:return}}function be(e){let t=e.choices[0],o=ze(t.message.content),n=Ke(t.message.tool_calls);return{id:e.id,type:"message",role:"assistant",model:e.model,content:[...o,...n],stop_reason:j(t.finish_reason),stop_sequence:null,usage:{input_tokens:e.usage?.prompt_tokens??0,output_tokens:e.usage?.completion_tokens??0}}}function ze(e){return typeof e=="string"?[{type:"text",text:e}]:Array.isArray(e)?e.filter(t=>t.type==="text").map(t=>({type:"text",text:t.text})):[]}function Ke(e){return e?e.map(t=>({type:"tool_use",id:t.id,name:t.function.name,input:JSON.parse(t.function.arguments)})):[]}function Qe(e){return e.contentBlockOpen?Object.values(e.toolCalls).some(t=>t.anthropicBlockIndex===e.contentBlockIndex):!1}function _e(e,t){let o=[];if(e.choices.length===0)return o;let n=e.choices[0],{delta:s}=n;if(t.messageStartSent||(o.push({type:"message_start",message:{id:e.id,type:"message",role:"assistant",content:[],model:e.model,stop_reason:null,stop_sequence:null,usage:{input_tokens:1,output_tokens:1}}}),t.messageStartSent=!0),s.content&&(Qe(t)&&(o.push({type:"content_block_stop",index:t.contentBlockIndex}),t.contentBlockIndex++,t.contentBlockOpen=!1),t.contentBlockOpen||(o.push({type:"content_block_start",index:t.contentBlockIndex,content_block:{type:"text",text:""}}),t.contentBlockOpen=!0),o.push({type:"content_block_delta",index:t.contentBlockIndex,delta:{type:"text_delta",text:s.content}})),s.tool_calls)for(let i of s.tool_calls){if(i.id&&i.function?.name){t.contentBlockOpen&&(o.push({type:"content_block_stop",index:t.contentBlockIndex}),t.contentBlockIndex++,t.contentBlockOpen=!1);let c=t.contentBlockIndex;t.toolCalls[i.index]={id:i.id,name:i.function.name,anthropicBlockIndex:c},o.push({type:"content_block_start",index:c,content_block:{type:"tool_use",id:i.id,name:i.function.name,input:{}}}),t.contentBlockOpen=!0}if(i.function?.arguments){let c=t.toolCalls[i.index];c&&o.push({type:"content_block_delta",index:c.anthropicBlockIndex,delta:{type:"input_json_delta",partial_json:i.function.arguments}})}}return n.finish_reason&&(t.contentBlockOpen&&(o.push({type:"content_block_stop",index:t.contentBlockIndex}),t.contentBlockOpen=!1),o.push({type:"message_delta",delta:{stop_reason:j(n.finish_reason),stop_sequence:null},usage:{output_tokens:1}}),o.push({type:"message_stop"})),o}async function ke(e){await B(r);let t=await e.req.json();y.debug("Anthropic request payload:",JSON.stringify(t));let o=ye(t);y.debug("Translated OpenAI request payload:",JSON.stringify(o)),r.manualApprove&&await E();let n=await O(o);if(Ye(n)){y.debug("Non-streaming response from Copilot:",JSON.stringify(n).slice(-400));let s=be(n);return y.debug("Translated Anthropic response:",JSON.stringify(s)),e.json(s)}return y.debug("Streaming response from Copilot"),Xe(e,async s=>{let i={messageStartSent:!1,contentBlockIndex:0,contentBlockOpen:!1,toolCalls:{}};for await(let c of n){if(y.debug("Copilot raw stream event:",JSON.stringify(c)),c.data==="[DONE]")break;if(!c.data)continue;let m=JSON.parse(c.data),T=_e(m,i);for(let g of T)y.debug("Translated Anthropic event:",JSON.stringify(g)),await s.writeSSE({event:g.type,data:JSON.stringify(g)})}})}var Ye=e=>Object.hasOwn(e,"choices");var F=new Ze;F.post("/",async e=>{try{return await ke(e)}catch(t){return await f(e,t)}});import{Hono as et}from"hono";var U=new et;U.get("/",async e=>{try{r.models||await P();let t=r.models?.data.map(o=>({id:o.id,object:"model",type:"model",created:0,created_at:new Date(0).toISOString(),owned_by:o.vendor,display_name:o.name}));return e.json({object:"list",data:t,has_more:!1})}catch(t){return await f(e,t)}});import{Hono as tt}from"hono";var J=new tt;J.get("/",e=>{try{return e.json({token:r.copilotToken})}catch(t){return console.error("Error fetching token:",t),e.json({error:"Failed to fetch token",token:null},500)}});import{Hono as ot}from"hono";var we=async()=>{let e=await fetch(`${k}/copilot_internal/user`,{headers:S(r)});if(!e.ok)throw new a("Failed to get Copilot usage",e);return await e.json()};var W=new ot;W.get("/",async e=>{try{let t=await we();return e.json(t)}catch(t){return console.error("Error fetching Copilot usage:",t),e.json({error:"Failed to fetch Copilot usage"},500)}});var p=new nt;p.use(st());p.use(rt());p.get("/",e=>e.text("Server running"));p.route("/chat/completions",I);p.route("/models",U);p.route("/embeddings",M);p.route("/usage",W);p.route("/token",J);p.route("/v1/chat/completions",I);p.route("/v1/models",U);p.route("/v1/embeddings",M);p.route("/v1/messages",F);p.post("/v1/messages/count_tokens",e=>e.json({input_tokens:1}));async function lt(e){e.verbose&&(u.level=5,u.info("Verbose logging enabled")),r.accountType=e.accountType,e.accountType!=="individual"&&u.info(`Using ${e.accountType} plan GitHub account`),r.manualApprove=e.manual,r.rateLimitSeconds=e.rateLimit,r.rateLimitWait=e.rateLimitWait,r.showToken=e.showToken,await C(),await ie(),e.githubToken?(r.githubToken=e.githubToken,u.info("Using provided GitHub token")):await H(),await le(),await P(),u.info(`Available models: 
${r.models?.data.map(o=>`- ${o.id}`).join(`
`)}`);let t=`http://localhost:${e.port}`;if(e.claudeCode){pt(r.models,"Models should be loaded by now");let o=await u.prompt("Select a model to use with Claude Code",{type:"select",options:r.models.data.map(i=>i.id)}),n=await u.prompt("Select a small model to use with Claude Code",{type:"select",options:r.models.data.map(i=>i.id)}),s=ue({ANTHROPIC_BASE_URL:t,ANTHROPIC_AUTH_TOKEN:"dummy",ANTHROPIC_MODEL:o,ANTHROPIC_SMALL_FAST_MODEL:n},"claude");at.writeSync(s),u.success("Copied Claude Code command to clipboard!")}u.box(`\u{1F310} Usage Viewer: https://ericc-ch.github.io/copilot-api?endpoint=${t}/usage`),ct({fetch:p.fetch,port:e.port})}var Te=it({meta:{name:"start",description:"Start the Copilot API server"},args:{port:{alias:"p",type:"string",default:"4141",description:"Port to listen on"},verbose:{alias:"v",type:"boolean",default:!1,description:"Enable verbose logging"},"account-type":{alias:"a",type:"string",default:"individual",description:"Account type to use (individual, business, enterprise)"},manual:{type:"boolean",default:!1,description:"Enable manual request approval"},"rate-limit":{alias:"r",type:"string",description:"Rate limit in seconds between requests"},wait:{alias:"w",type:"boolean",default:!1,description:"Wait instead of error when rate limit is hit. Has no effect if rate limit is not set"},"github-token":{alias:"g",type:"string",description:"Provide GitHub token directly (must be generated using the `auth` subcommand)"},"claude-code":{alias:"c",type:"boolean",default:!1,description:"Generate a command to launch Claude Code with Copilot API config"},"show-token":{type:"boolean",default:!1,description:"Show GitHub and Copilot tokens on fetch and refresh"}},run({args:e}){let t=e["rate-limit"],o=t===void 0?void 0:Number.parseInt(t,10);return lt({port:Number.parseInt(e.port,10),verbose:e.verbose,accountType:e["account-type"],manual:e.manual,rateLimit:o,rateLimitWait:!!e.wait,githubToken:e["github-token"],claudeCode:e["claude-code"],showToken:e["show-token"]})}});var dt=mt({meta:{name:"copilot-api",description:"A wrapper around GitHub Copilot API to make it OpenAI compatible, making it usable for other tools."},subCommands:{auth:me,start:Te}});await ut(dt);
